* {
    box-sizing: border-box;
}

body {
    background-color: #1c1a1a;
    margin: 0;
}

html, body {
    width: 100%; 
    height: 100%;
}

@font-face {
    font-family: Monument Extended;
    font-weight: bold;
    src: url("/fuentes/MonumentExtended-Ultrabold.otf") format("opentype");
}

@font-face {
    font-family: Monument Extended;
    font-weight: normal;
    src: url("/fuentes/MonumentExtended-Regular.otf") format("opentype");
}



@font-face {
    font-family: Jost;
    font-weight: normal;
    src: url("/fuentes/Jost-500-Medium.otf") format("opentype");
}

@font-face {
    font-family: Jost;
    font-weight: 700;
    src: url("/fuentes/Jost-700-Bold.otf") format("opentype");
}

@font-face {
    font-family: Mixo;
    font-weight: normal;
    src: url("/fuentes/Mixo-Regular_web.otf") format("opentype");
}

@font-face {
    font-family: Savate;
    font-weight: normal;
    src: url("/fuentes/savate-regular.otf") format("opentype");
}

@font-face {
    font-family: Savate;
    font-weight: normal;
    font-style: italic;
    src: url("/fuentes/savate-italique.otf") format("opentype");
}


h1 {
    text-transform: uppercase;
    font-family: Mixo;
    font-weight: normal; 
    letter-spacing: 2px;
}

.color-acento {
    color: #E92D46;
}


.titulo-principal {
    font-size: 70px;
    margin-top: 40px;   
}

.titulo-secundario {
    font-size: 70px;
    margin: 0;
}

.vectores {
    fill: white;
}

.links {
    font-family: Savate;
    font-weight: normal;
    padding: 20px;
    text-decoration: none;
    font-size: 20px;
    line-height: 30px;
    text-transform: uppercase;
}
.titulo-gigante {
    font-family: Monument Extended;
    font-weight: normal;
    -webkit-text-stroke: 2px white;
    text-transform: uppercase;
    font-size: 150;
    color: #1c1a1a;
}
.nav-wrapper{
    height: 100px;    
}

.parrafo {
    font-family: Savate;
    font-weight: normal;
    color: white;
    font-size: 24;
}
.icons {
    padding: 10px;
}

.avatar {
    border-radius: 50%;
    overflow: hidden;
}

nav a{
    width: 150px;
}

/* Flexbox */


.links-flex {
    display: flex;
    justify-content: center;
    align-items: center;
}

.nav-left {
    display: flex;
}

.nav-right {
    display: flex;
    align-items: center;
}



.hero {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-end;
    height: 450px;
    margin-bottom: 180px;
}

.isologo-placeholder {
    align-self: center;
}




/* Grids */

.grid {
    display: grid;
    grid-gap: 0px;
    grid-template-columns: repeat(8,1fr);
    grid-template-rows: auto;
    grid-auto-rows: auto;
    margin: auto;
    min-height: 100vh;
    max-width: 1200px; 
    justify-content: center;
    align-items: start;
}

/* Las columnas en auto toman la altura de su contenido. Pero pasa algo raro. Si yo le pongo a los elementos diferentes coordenadas de columnas, va a crear las subdivisiones para dejar espacios de rows equivalentes a fracciones de la imagen.

Por ejemplo, si una imagen tiene span 3, y está en row 1, ocuparía tres subdivisiones. En base a eso, la siguiente la pongo en row 2, va a dejar un espacio arriba de 1/3 de la primera en base a esas subdivisiones que hizo. Todavía no lo entiendo mucho.*/

.grid-image-container {
    padding: 10px;
}

.grid-image {
    width: 100%;
    height: auto;
}

/* Relación de aspecto 16:9 */

/* Acá creo una caja sin altura y con un padding-top de 56.25 (16/9=0.5625. Esto genera la relación de aspecto que quiero. 

El padding-top se basa en width. El ancho se lo dará la coordenada de la grilla, en este caso es span 8.

Al darle height:0, la altura la define este padding. 

El padding me empuja el contenido hacia abajo, fuera de la caja. con overflow: hidden oculto el excedente. 

Le doy position: relative para darle absolute a la imagen.*/


.aspect-ratio-16-9 {
    padding-top: 56.25%;
    height: 0;
    position: relative;
    overflow: hidden;
}

/* La imagen, por otro lado, ocupará el 100% del ancho de su padre. La altura no la defino o sino se estruja todo.

Con position: absolute lo pongo arriba a la izquierda en el 0 del elemento que tiene absolute.

Si a top le pongo números negativos la imagen va subiendo y así la pongo en su caja. Pero de esta forma me aseguro que algo quede 16:9 aunque se pase un toque de tamaño.*/

.grid-image2 {
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: absolute;
    top: 0;
    left: 0; 
}

.grid-item1 {
    grid-column: 1 / span 8;
    grid-row: 1 / span 3;
}

.grid-item2 {
    grid-column: 1 / span 4;
    grid-row: 4 / span 3;

}

.grid-item3 {
    grid-column: 5 / span 4;
    grid-row: 5 / span 4;

}

.flex-column {
    display: flex;
    flex-direction: column;
}

.flex-image {
    margin: 10px 0;
}


/* Acá iría un espacio con unos svg */

.grid-item6 {
    grid-column: 1 / span 8;
    grid-row: 10 / span 3;

}

.grid-item7 {
    grid-column: 3 / span 3;
    grid-row: 13 / span 2;

}

.grid-item8 {
    grid-column: 6 / span 3;
    grid-row: 13 / span 2;

}

.grid-item9 {
    grid-column: 1 / span 5;
    grid-row: 15 / span 4;

}

.grid-item10 {
    grid-column: 6 / span 3;
    grid-row: 15 / span 2;

}

/* Acá iría otro espacio */

.grid-item11 {
    grid-column: 1 / span 4;
    grid-row: 19 / span 2;

}

.grid-item12 {
    grid-column: 5 / span 4;
    grid-row: 20 / span 4;

}

.grid-item13 {
    grid-column: 3 / span 2;
    grid-row: 19 / span 2;

}

.grid-item14 {
    grid-column: 1 / span 4;
    grid-row: 19 / span 2;

}

.grid-item15 {
    grid-column: 1 / span 4;
    grid-row: 22 / span 2;

}

.grid-item16 {
    grid-column: 5 / span 4;
    grid-row: 23 / span 2;

}

.grid-item17 {
    grid-column: 3 / span 2;
    grid-row: 21 / span 1;

}

.grid-item18 {
    grid-column: 5 / span 2;
    grid-row: 22 / span 1;

}

.grid-item19 {
    grid-column: 1 / span 8;
    grid-row: 25 / span 3;

}


